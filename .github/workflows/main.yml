# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  id-token: write
  contents: write

env:
  NODE_VERSION: 17.0.1
  ANCHOR_VERSION: 0.22.0
  SOLANA_VERSION_STABLE: 1.9.22
  RUST_TOOLCHAIN: stable
  PROGRAM_NAME: newworld

defaults:
  run:
    working-directory: ./newworld/program

jobs:
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      package: ${{ steps.filter.outputs.package }}
    steps:
      - uses: actions/checkout@v2
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            package:
              - 'newworld/**'

  dump-context:
    needs: changes
    # # on pull_request `close` into master (base_ref) === pull_request merged
    # if: |
    #   ${{ (needs.changes.outputs.core == 'true' || needs.changes.outputs.package == 'true') &&
    #       github.event_name == 'pull_request' && github.event.action == 'closed' }}
    runs-on: ubuntu-latest
    env:
      cache_id: program-newworld

    # todo: does this work?
    steps:
      - uses: actions/checkout@v2
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

  upgrade-version-and-publish-binary:
    needs: changes
    # `push` event == someone pushed directly to main or merged a PR
    if: ${{ (needs.changes.outputs.core == 'true' || needs.changes.outputs.package == 'true') && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    env:
      cache_id: program-newworld

    # todo: does this work?
    steps:
      - uses: actions/checkout@v2
      # - name: Publish updated artifacts to Crates and Github
      #   uses: ./.github/actions/publish-to-crates
      #   id: publish-to-crates
      #   with:
      #     cargo-token: ${{ secrets.CARGO_TOKEN }}
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     package-name: auction-house
      #     path-to-cargo: ./auction-house/program/Cargo.toml
      #     pull-number: ${{ github.event.number }}
      #     branch: ${{ github.ref }}

      # - uses: ./.github/actions/setup-aws-env/
      # - name: Build and upload
      #   uses: ./.github/actions/build-and-upload/
      #   id: upload-binary-metadata
      #   with:
      #     program-binary: auction-house.so
      #     account-id: ${{ env.BINARY_STORAGE_ACCOUNT_ID }}
      #     region: ${{ env.BINARY_STORAGE_REGION }}
      #     role: ${{ env.BINARY_STORAGE_ROLE }}
      #     bucket: ${{ env.BINARY_STORAGE_BUCKET }}
      #     prefix: auction-house

      # todo: can we embed setup in the `build-and-upload` action?
      - uses: ./.github/actions/setup-aws-env/
      - name: Dump AWS env vars
        run: |
          echo "$BINARY_STORAGE_ACCOUNT_ID"
          echo "$BINARY_STORAGE_REGION"
          echo "$BINARY_STORAGE_ROLE"
          echo "$BINARY_STORAGE_BUCKET"
        shell: bash
